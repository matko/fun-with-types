;; -*- mode: lisp; -*-

(def RecN
    (function [el0 Nat
	       eln->n+1 (ftype [x Nat y Nat] Nat)
	       n Nat]
	      (RecNat (function [n Nat] Nat)
		      el0
		      eln->n+1
		      n)))

(def +
    (function [m Nat n Nat]
	      (RecN m
		    (function [x Nat y Nat]
			      (succ y))
		    n)))

(def pred
    (function [n Nat]
	      (RecN 0
		    (function [x Nat y Nat]
			      x)
		    n)))

(def -
    (function [m Nat n Nat]
	      (RecN m
		    (function [x Nat y Nat]
			      (pred y))
		    n)))

(def *
    (function [m Nat n Nat]
	      (RecN 0
		    (function [x Nat y Nat]
			      (+ m y))
		    n)))


